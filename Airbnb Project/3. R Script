## Installing the necessary packages to conduct the analysis
install.packages("readr")
library(readr)
install.packages("tidyr")
library(tidyr)
install.packages("dplyr")
library(dplyr)
install.packages("ggplot2")
library(ggplot2)
install.packages("ggmap")
library(ggmap)

1. summary_total_reviews_room_type <- Airbnb_cleaned_listings %>%
  group_by(room_type) %>%
  summarise(total_reviews = sum(number_of_reviews)) %>%
  arrange(desc(total_reviews))

ggplot(summary_total_reviews_room_type, aes(x = reorder(room_type, total_reviews), y = total_reviews, fill = room_type)) +
  geom_bar(stat = "identity", color = "black") +
  labs(title = "Total Reviews by Room Type",
       x = "Room Type",
       y = "Total Reviews") +
  theme_minimal() +
  theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
  scale_y_continuous(labels = function(x) format(x, scientific = FALSE))

2. summary_percentage_reviews_per_room_type <- summary_total_reviews_room_type %>%
  mutate(percentage_reviews = (total_reviews / sum(total_reviews)) * 100)

ggplot(summary_percentage_reviews_per_room_type, aes(x = reorder(room_type, percentage_reviews), y = percentage_reviews, fill = room_type)) + 
  geom_bar(stat = "identity", color = "black") + 
  geom_text(aes(label = paste0(round(percentage_reviews, 1), "%")), 
            vjust = -0.5, size = 3, color = "black", 
            position = position_dodge(width = 0.9)) +
  labs(title = "Review distribution by room_type", x = "Room Type", y = "Review Distribution Percentage")


3. room_type_percentages <- Airbnb_cleaned_listings %>%
  count(room_type) %>%
  mutate(percentage = n / sum(n) * 100)

ggplot(room_type_percentages, aes(x = reorder(room_type, percentage), y = percentage, fill = room_type)) +
  geom_bar(stat = "identity", color = "black") +
  geom_text(aes(label = paste0(round(percentage, 1), "%")), vjust = -0.5, size = 3, color = "black") +
  labs(title = "Listing Distribution by room type",
       x = "Room Type",
       y = "Percentage",
       fill = "Room Type") +
  theme_minimal() +
  theme(axis.text.x = element_text(angle = 45, hjust = 1))


4. summary_avg_availability <- Airbnb_cleaned_listings %>%
  group_by(room_type) %>%
  summarise(avg_availability_365 = round(mean(availability_365, na.rm = TRUE))) %>%
  arrange((avg_availability_365))

ggplot(summary_avg_availability, aes(x = reorder(room_type, avg_availability_365), y = avg_availability_365, fill = room_type)) +
  geom_bar(stat = "identity", color = "black") +
  labs(title = "Average Availability by Room Type",
       x = "Room Type",
       y = "Average Availability (365 days)") +
  theme_minimal() +
  theme(axis.text.x = element_text(angle = 45, hjust = 1))


5. summary_neighbourhood_price <- Airbnb_cleaned_listings %>%
  group_by(neighbourhood) %>%
  summarise(avg_price = mean(price, na.rm = TRUE)) %>%
  arrange((avg_price))

ggplot(summary_neighbourhood_price, aes(x = reorder(neighbourhood, avg_price), y = avg_price)) +
  geom_bar(stat = "identity", fill = "lightblue", color = "black") +
  labs(title = "Average Price by Neighborhood", x = "Neighborhood", y = "Average Price") +
  theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust = 1))


6. summary_median_avail_neighbourhood <- Airbnb_cleaned_listings %>%
  group_by(neighbourhood) %>%
  summarise(avg_avail = round(mean(availability_365))) %>%
  arrange(avg_avail)

ggplot(summary_median_avail_neighbourhood, aes(x = avg_avail, y = reorder(neighbourhood, avg_avail))) +
  geom_bar(stat = "identity", fill = "lightblue", color = "black", width = 0.7) +
  labs(title = "Average Availability by Neighborhood",
       y = "Neighborhood",
       x = "Average Availability (365 days)") +
  theme(axis.text.y = element_text(angle = 0, hjust = 1, vjust = 0.5)) +
  theme_minimal()

7. average_price_per_neighbourhood <- Airbnb_cleaned_listings %>%
  group_by(neighbourhood, room_type) %>%
  summarise(avg_price = mean(price, na.rm = TRUE))


ggplot(average_price_per_neighbourhood, aes(x = neighbourhood, y = avg_price, fill = neighbourhood)) +
  geom_bar(stat = "identity", position = "dodge", color = "black") +
  facet_wrap(~ room_type, scales = "free", nrow = 2) +
  labs(title = "Average Price per Room Type per Neighborhood", x = "Neighborhood", y = "Average Price") +
  theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust = 1),
        legend.position = "none")

## facet wrap condensed the visualisation to much for a clear view so seperated each plot by room type

room_type_1 <- subset(average_price_per_neighbourhood, room_type == unique_room_types[1])
room_type_2 <- subset(average_price_per_neighbourhood, room_type == unique_room_types[2])
room_type_3 <- subset(average_price_per_neighbourhood, room_type == unique_room_types[3])
room_type_4 <- subset(average_price_per_neighbourhood, room_type == unique_room_types[4])

plot_1 <- ggplot(room_type_1, aes(x = reorder(neighbourhood, avg_price), y = avg_price)) +
  geom_bar(stat = "identity", position = "dodge", color = "black", fill = "#F8766D") +
  labs(title = paste("Average Price for", unique_room_types[1], "per Neighborhood"), x = "Neighborhood", y = "Average Price") +
  theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust = 1))

plot_2 <- ggplot(room_type_2, aes(x = reorder(neighbourhood, avg_price), y = avg_price)) +
  geom_bar(stat = "identity", position = "dodge", color = "black", fill = "#00BFC4") +
  labs(title = paste("Average Price for", unique_room_types[2], "per Neighborhood"), x = "Neighborhood", y = "Average Price") +
  theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust = 1)) 

plot_3 <- ggplot(room_type_3, aes(x = reorder(neighbourhood, avg_price), y = avg_price)) +
  geom_bar(stat = "identity", position = "dodge", color = "black", fill = "#C77CFF") +
  labs(title = paste("Average Price for", unique_room_types[3], "per Neighborhood"), x = "Neighborhood", y = "Average Price") +
  theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust = 1))

plot_4 <- ggplot(room_type_4, aes(x = reorder(neighbourhood, avg_price), y = avg_price)) +
  geom_bar(stat = "identity", position = "dodge", color = "black", fill = "#7CAE00") +
  labs(title = paste("Average Price for", unique_room_types[4], "per Neighborhood"), x = "Neighborhood", y = "Average Price") +
  theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust = 1))

8. AIzaSyDCtqYkOlgt3ETuKK22EjnoKsDNF76jr78

library(ggmap)

# Register your Google Maps API key
register_google(key = "AIzaSyDCtqYkOlgt3ETuKK22EjnoKsDNF76jr78")

# Getting a map of London
london_map <- get_map(location = "London", zoom = 11, maptype = "roadmap")

# Plotting the map
ggmap(london_map) +
  geom_point(data = Airbnb_Cleaned, aes(x = longitude, y = latitude), size = 0.1, colour = "red", alpha = 0.5) +
  labs(title = "Map of London Listings", x = "Longitude", y = "Latitude")
